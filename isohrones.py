# -*- coding: utf-8 -*-
"""isohrones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LKa1OTs6nUQq9DsMGlfYyjRSqjqmNwNO
"""

# pip install pyrosm

# pip install matplotlib

# pip install matplotlib==3.1.3

# pip install geopandas

# pip install networkx

# pip install osmnx

import geopandas as gpd
import pandas
import numpy as np
import os
import matplotlib
import networkx as nx
import osmnx as ox
from pyrosm import OSM, get_data
from descartes import PolygonPatch
from shapely.geometry import Point, LineString, Polygon
ox.config(log_console=True, use_cache=True)
ox.__version__
from sqlalchemy import create_engine
engine = create_engine("postgresql://postgres:matem62@localhost:5432/isohrones")  



# configure the place, network type, trip times, and travel speed
place = 'Василеостровский район,Санкт-Петербург,Россия'
network_type = 'walk'
travel_speed = 4.5 #walking speed in km/hour
UTM_zone = 32636

walk_links = """["highway"~"residential|footway|unclassified|steps|path|service"]["access"!~"private"]["subway" !~ "yes"]
["layer" != "-5"]["layer" != "-4"]["layer" != "-3"]["service"!~"private"]["foot"!~"no"]["access"!~"no"]"""

# скачиваем уличную сеть 
G = ox.graph_from_place(place, network_type=network_type, simplify=False)

meters_per_minute = travel_speed * 1000 / 60  # km per hour to m per minute
for _, _, _, data in G.edges(data=True, keys=True):
    data["time"] = data["length"] / meters_per_minute

G = ox.project_graph(G, 32636)

fig, ax = ox.plot_graph(G)

fig = ox.plot_graph(G, node_size=0)

tags = {"highway": "bus_stop"}
bus_stop_1 = ox.geometries_from_place(place, tags)

# bus_stop_1 = bus_stop_1['geometry']
bus_stop_1 = bus_stop_1.to_crs(32636)

bus_stop_1['id'] = range(1, len(bus_stop_1) + 1)

bus_stop_1

bus_stop_1[['id','geometry']]

nearest_nodes_array = np.array(ox.distance.nearest_nodes(G, bus_stop_1['geometry'].x, bus_stop_1['geometry'].y, return_dist=True)).T

bus_stop_1 = bus_stop_1.assign(**{"gr_nn":nearest_nodes_array[:, 0], "distance":nearest_nodes_array[:, 1]}).astype({'gr_nn':np.int64})

print(type(bus_stop_1['gr_nn']))

def make_iso_polys(G, trip_time, bus_stop_1, edge_buff=25, node_buff=50, infill=True):
  
    for index, row in bus_stop_1.iterrows():
        node = row['gr_nn']
        subgraph = nx.ego_graph(G, node, radius=trip_time, distance='time')

        node_points = [Point((data['x'], data['y'])) for node, data in subgraph.nodes(data=True)]
        nodes_gdf = gpd.GeoDataFrame({'id': subgraph.nodes()}, geometry=node_points)
        nodes_gdf = nodes_gdf.set_index('id')

        edge_lines = []
        
        for n_fr, n_to in subgraph.edges():
            f = nodes_gdf.loc[n_fr].geometry
            t = nodes_gdf.loc[n_to].geometry
            edge_lookup = G.get_edge_data(n_fr, n_to)[0].get('geometry',  LineString([f,t]))
            edge_lines.append(edge_lookup)

        n = nodes_gdf.buffer(node_buff).geometry
        e = gpd.GeoSeries(edge_lines).buffer(edge_buff).geometry
        all_gs = list(n) + list(e)
        new_iso = gpd.GeoSeries(all_gs).unary_union
        
        # try to fill in surrounded areas so shapes will appear solid and blocks without white space inside them
        if infill:
            new_iso = Polygon(new_iso.exterior)
        bus_stop_1.loc[index, 'iso_geom'] = new_iso
    return bus_stop_1

"""Построили изохроны, которые находятся в 5 минутах от остановок"""

trip_time = 5

isochrone_polys_5 = make_iso_polys(G, trip_time, bus_stop_1, edge_buff=25, node_buff=50, infill=True)
isochrone_polys_5 = isochrone_polys_5.drop(columns=['geometry'], axis = 1) 
isochrone_polys_5= isochrone_polys_5.rename(columns={'iso_geom':'geometry'})
isochrone_polys_5.plot()
isochrone_polys_5_new = isochrone_polys_5[['geometry', 'name']]

isochrone_polys_5_new = isochrone_polys_5[['geometry', 'name']]

trip_time = 10
isochrone_polys_10 = make_iso_polys(G, trip_time, bus_stop_1, edge_buff=25, node_buff=50, infill=True)
isochrone_polys_10 = isochrone_polys_10.drop(columns=['geometry'], axis = 1) 
isochrone_polys_10 = isochrone_polys_10.rename(columns={'iso_geom':'geometry'})
isochrone_polys_10.plot()

isochrone_polys_10_new = isochrone_polys_10[['geometry', 'name']]

#скачиваем данные из osm
tags = {"building": "apartments"}
apartments = ox.geometries_from_place(place, tags)
apartments = apartments.to_crs(UTM_zone)
apartments.plot()

apartments_new = apartments[['geometry', 'addr:street', 'addr:housenumber']]

#дома в которые входят в изохроны 5 минут от остановок
apartments_5 = gpd.sjoin(apartments_new, isochrone_polys_5_new, how="inner", op='intersects')
#дома в которые входят в изохроны 10 минут от остановок
apartments_10 = gpd.sjoin(apartments_new, isochrone_polys_10_new, how="inner", op='intersects')

#количество домов в 5 минутах от остановок
apartments_5['adress'] = apartments_5['addr:street'].str.cat(apartments_5['addr:housenumber'])
apartments_5['adress'].value_counts().count()

#количество домов в 10 минутах от остановок
apartments_10['adress'] = apartments_10['addr:street'].str.cat(apartments_10['addr:housenumber'])
apartments_10['adress'].value_counts().count()


tags = {"amenity": "hospital"}
hospital = ox.geometries_from_place(place, tags)
hospital = hospital.to_crs(UTM_zone)
hospital.plot()

hospital_new = hospital[['geometry', 'addr:street','addr:housenumber']]

#больницы в которые входят в изохроны 5 минут от остановок
hospital_5 = gpd.sjoin(hospital_new, isochrone_polys_5_new, how="inner", op='intersects')
#больницы в которые входят в изохроны 10 минут от остановок
hospital_10 = gpd.sjoin(hospital_new, isochrone_polys_10_new, how="inner", op='intersects')

#количество больниц в 5 минутах от остановок
hospital_5['adress'] = hospital_5['addr:street'].str.cat(hospital_5['addr:housenumber'])
hospital_5['adress'].value_counts().count()

#количество больниц в 10 минутах от остановок
hospital_10['adress'] = hospital_10['addr:street'].str.cat(hospital_10['addr:housenumber'])
hospital_10['adress'].value_counts().count()


tags = {"amenity": "school"}
school = ox.geometries_from_place(place, tags)
school = school.to_crs(UTM_zone)
school.plot()

school_new = school[['geometry', 'addr:street','addr:housenumber']]

tags = {"amenity": "university"}
university = ox.geometries_from_place(place, tags)
university = university.to_crs(UTM_zone)
university.plot()

university_new = university[['geometry', 'addr:street','addr:housenumber']]

university_new = university[['geometry', 'name']]

study_new = school_new.append(university_new)

#школы и университеты в которые входят в изохроны 5 минут от остановок
study_new_5 = gpd.sjoin(study_new, isochrone_polys_5_new, how="inner", op='intersects')
#больницы в которые входят в изохроны 10 минут от остановок
study_new_10 = gpd.sjoin(study_new, isochrone_polys_10_new, how="inner", op='intersects')

#количество школ и университетов в 5 минутах от остановок
study_new_5['adress'] = study_new_5['addr:street'].str.cat(study_new_5['addr:housenumber'])
study_new_5['adress'].value_counts().count()

#количество больниц в 10 минутах от остановок
study_new_10['adress'] = study_new_10['addr:street'].str.cat(study_new_10['addr:housenumber'])
study_new_10['adress'].value_counts().count()


isochrone_polys_5_new.to_postgis("isochrone_polys_5_new", con=engine)
isochrone_polys_10_new.to_postgis("isochrone_polys_10_new", con=engine)

apartments_5.to_postgis("apartments_5", con=engine)
apartments_10.to_postgis("apartments_10", con=engine)

hospital_5.to_postgis("hospital_5", con=engine)
hospital_10.to_postgis("hospital_10", con=engine)

study_new_5.to_postgis("study_new_5", con=engine)
study_new_10.to_postgis("study_new_10", con=engine)